@inject Services.MessageService MessageService
@using PikaStatus.Components


    <div class="card indigo white-text">
        <span class="badge @_messageCardColor white-text">@_badgeText</span>
        @if (_messageTuple != null)
        {
            <div class="card-content">
                <span class="card-title">@SystemName</span>
                <div class="row">
                    <div class="col s12 m12 l12">
                        <strong><b>@_message</b></strong>
                    </div>
                </div>
            </div>
            <div class="card-action">
                <a href="/Messages/@SystemName" class="white-text">View more messages</a>
            </div>
        }
        else
        {
            <div class="card-content">
                <ProgressSpinner PromptText = "Loading details..."/>
            </div>
        }
    </div>

@code{
    [Parameter]
    public string SystemName { get; set; }
    private Tuple<bool,string> _messageTuple;
    private string _messageCardColor = "";
    private string _message = "";
    private string _badgeText = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _messageTuple = await MessageService.GetLatestMessage(SystemName);
        }
        catch 
        {
            _messageTuple = new Tuple<bool, string>(false, "No messages available for the system.");
        }
        var (status, text) = await MessageService.GetSystemStateText(SystemName);
        _message = _messageTuple.Item2 ?? "Probably no message is available.";
        _messageCardColor = text.Equals("Graceful") ? "light-green darken-3" : "red darken-3";
        _badgeText = text;
    }
}

