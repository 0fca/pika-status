@page "/status"
@inject Services.MessageService MessageService
@using PikaStatus.Components

@if (!isError)
{
    @if (_isOkLoadingSystems
       && !string.IsNullOrEmpty(_mainPanelMessage))
    {
        <div class="container">
            <div class="row">
                <div class="col s12 m6 l6">
                    <div class="collection with-header">
                        <div class="collection-header">
                            <h5>
                                <span class="@_statusBadgeColor">@_statusBadgeText</span>
                                @_mainPanelMessage
                            </h5>
                        </div>
                            @foreach (var system in _systems)
                            {
                                <SystemStatusCollectionItem SystemName="@system" />
                            }
                        </div>
                </div>
                <div class="col s12 m6 l6">
                    <div class="collection with-header">
                        <div class="collection-header"><h5>Messages</h5></div>
                            @foreach (var system in _systems)
                            {
                                <SystemMessageCollectionItem SystemName="@system" />
                            }
                    
                        </div>
                </div>
            </div>
        </div>
    }
    else if (!_isOkLoadingSystems
    && !string.IsNullOrEmpty(_mainPanelMessage))
    {
        <div class="container">
            <div class="card-panel havelock darken-3 white-text">
                @_mainPanelMessage
            </div>
        </div>

    }
    else
    {
        <ProgressSpinner />
    }
}
else
{
    <div class="card-panel red darken-3 white-text">
        Sorry, but an error ocurred.
    </div>
}
@code {
    private string _statusBadgeColor = "";
    private string _mainPanelMessage = "";
    private string _statusBadgeText = "";
    private IList<string> _systems = new List<string>();
    private bool _isOkLoadingSystems;
    public bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var (message, status) = await MessageService.GetOverallStatus();
            _statusBadgeColor = status ? "badge green white-text" : "badge red white-text";
            _statusBadgeText = status ? "OK" : "Fail";
            if (status)
            {
                var (isOkayLoadingSystems, systemList) = (await MessageService.GetAllSystems());
                _systems = systemList;
                _isOkLoadingSystems = isOkayLoadingSystems;
            }
            else
            {
                _isOkLoadingSystems = !status;
            }
            _mainPanelMessage = message;
        }
        catch
        {
            isError = true;
        }
    }
}
